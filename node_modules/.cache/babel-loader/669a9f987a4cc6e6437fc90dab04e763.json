{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/Test3/src/Page/Map.js\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Link from '@material-ui/core/Link';\nimport Button from '@material-ui/core/Button';\nGeocode.setApiKey(\" AIzaSyBrarTsUjcPrHWIHJ-sQ9wrYNvvcdG3q0s \");\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  handleScriptLoad() {\n    const inputEl = document.getElementById('address-input');\n    /*global google*/\n\n    var options = {\n      //types: ['address'],\n      componentRestrictions: {\n        country: 'by'\n      }\n    };\n    this.autocomplete = new google.maps.places.Autocomplete(inputEl, options);\n    this.autocomplete.addListener('place_changed', this.handlePlaceSelect.bind(this));\n  }\n\n  handlePlaceSelect() {\n    console.log(this.autocomplete.getPlace());\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\n    * Get the current address from the default map position and set those values in the state\n    */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      console.log('res', response);\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log('city', city, area, state);\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n    *\n    * @param nextProps\n    * @param nextState\n    * @return {boolean}\n    */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\n    * Get the area and set the area input value to the one selected\n    *\n    * @param addressArray\n    * @return {string}\n    */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"form-group\",\n        align: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(Link, {\n        color: \"inherit\",\n        href: \"/map.html\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"\\u0E04\\u0E49\\u0E19\\u0E2B\\u0E32 \\u0E23\\u0E49\\u0E32\\u0E19\\u0E2D\\u0E32\\u0E2B\\u0E32\\u0E23 \\u0E40\\u0E02\\u0E15\\u0E1A\\u0E32\\u0E07\\u0E0B\\u0E37\\u0E48\\u0E2D \\u0E01\\u0E17\\u0E21\")))), React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBrarTsUjcPrHWIHJ-sQ9wrYNvvcdG3q0s&libraries=places\",\n        loadingElement: React.createElement(\"div\", {\n          style: {\n            height: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }),\n        containerElement: React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }),\n        mapElement: React.createElement(\"div\", {\n          style: {\n            height: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }));\n    } else {\n      map = React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Applications/MAMP/htdocs/Test3/src/Page/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Geocode","Link","Button","setApiKey","enableDebug","Map","Component","handleScriptLoad","inputEl","document","getElementById","options","componentRestrictions","country","autocomplete","google","maps","places","Autocomplete","addListener","handlePlaceSelect","bind","console","log","getPlace","constructor","props","getArea","addressArray","area","i","length","types","j","long_name","onChange","event","setState","target","name","value","onInfoWindowClose","state","address","city","mapPosition","lat","center","lng","markerPosition","componentDidMount","fromLatLng","then","response","results","formatted_address","address_components","getCity","getState","error","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","zoom","map","undefined","height"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Link from '@material-ui/core/Link';\nimport Button from '@material-ui/core/Button';\n\n\nGeocode.setApiKey(\" AIzaSyBrarTsUjcPrHWIHJ-sQ9wrYNvvcdG3q0s \");\nGeocode.enableDebug();\n\nclass Map extends React.Component{\n\n  handleScriptLoad() {\n    const inputEl = document.getElementById('address-input');\n\n    /*global google*/\n    var options = {\n        //types: ['address'],\n        componentRestrictions: {country: 'by'}\n    };\n    this.autocomplete = new google.maps.places.Autocomplete(inputEl, options);\n    this.autocomplete.addListener('place_changed', this.handlePlaceSelect.bind(this));\n}\n\nhandlePlaceSelect() {\n    console.log(this.autocomplete.getPlace());\n}\n    \n\nconstructor( props ){\n  super( props );\n  this.state = {\n   address: '',\n   city: '',\n   area: '',\n   state: '',\n   mapPosition: {\n    lat: this.props.center.lat,\n    lng: this.props.center.lng\n   },\n   markerPosition: {\n    lat: this.props.center.lat,\n    lng: this.props.center.lng\n\n}\n  }\n }\n\n/**\n  * Get the current address from the default map position and set those values in the state\n  */\n componentDidMount() {\n  Geocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\n   response => {\n       console.log( 'res', response );\n    const address = response.results[0].formatted_address,\n     addressArray =  response.results[0].address_components,\n     city = this.getCity( addressArray ),\n     area = this.getArea( addressArray ),\n     state = this.getState( addressArray );\n  \n    console.log( 'city', city, area, state );\n  \n    this.setState( {\n     address: ( address ) ? address : '',\n     area: ( area ) ? area : '',\n     city: ( city ) ? city : '',\n     state: ( state ) ? state : '',\n    } )\n   },\n   error => {\n    console.error(error);\n   }\n  );\n };\n\n/**\n  * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\n  *\n  * @param nextProps\n  * @param nextState\n  * @return {boolean}\n  */\n shouldComponentUpdate( nextProps, nextState ){\n  if (\n   this.state.markerPosition.lat !== this.props.center.lat ||\n   this.state.address !== nextState.address ||\n   this.state.city !== nextState.city ||\n   this.state.area !== nextState.area ||\n   this.state.state !== nextState.state\n  ) {\n   return true\n  } else if ( this.props.center.lat === nextProps.center.lat ){\n   return false\n  }\n }\n\n\n/**\n  * Get the area and set the area input value to the one selected\n  *\n  * @param addressArray\n  * @return {string}\n  */\n getArea = ( addressArray ) => {\n  let area = '';\n  for( let i = 0; i < addressArray.length; i++ ) {\n   if ( addressArray[ i ].types[0]  ) {\n    for ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\n     if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\n      area = addressArray[ i ].long_name;\n      return area;\n     }\n    }\n   }\n  }\n };\n\n\n/**\n  * And function for city,state and address input\n  * @param event\n  */\n onChange = ( event ) => {\n  this.setState({ [event.target.name]: event.target.value });\n };\n\n/**\n  * This Event triggers when the marker window is closed\n  *\n  * @param event\n  */\n onInfoWindowClose = ( event ) => {\n\n};\n\nrender(){\n\nconst AsyncMap = withScriptjs(\n   withGoogleMap(\n    props => (\n     <GoogleMap google={this.props.google}\n      defaultZoom={this.props.zoom}\n      defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\n     >\n\n</GoogleMap>\n\n)\n   )\n  );\n\nlet map;\n  if( this.props.center.lat !== undefined ) {\n   map = <div>\n     <div><br></br>\n      <div className=\"form-group\" align=\"center\">\n       \n      <Button variant=\"contained\" color=\"primary\"> \n                  <Link color=\"inherit\" href=\"/map.html\">\n                    ค้นหา ร้านอาหาร เขตบางซื่อ กทม\n                  </Link>\n                  </Button>\n      </div>\n      \n     </div>\n     <AsyncMap\n      googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBrarTsUjcPrHWIHJ-sQ9wrYNvvcdG3q0s&libraries=places\"\n      loadingElement={\n       <div style={{ height: `100%` }} />\n      }\n      containerElement={\n       <div style={{ height: this.props.height }} />\n      }\n      mapElement={\n       <div style={{ height: `100%` }} />\n      }\n     />\n    </div>\n\n} else {\n   map = <div style={{height: this.props.height}} />\n  }\n  return( map )\n }\n}\n\nexport default Map"]},"metadata":{},"sourceType":"module"}